#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bountyweb:server');
var http = require('http');
var config = require('../block/config');
var account = require('../block/account');
var bounty = require('../block/bounty');
var events = require('events');
var eventEmitter = new events.EventEmitter();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3015');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create Socket server.
 */

io = require('socket.io')(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var company = io.of('/company');
var webuser = io.of('/web');
var user = io.of('/user');

let dataUser = {};
let dataId = {};
let dataLg = {};

company.on('connection', function (socket){
  console.log(socket.id);

  bounty.Reconnect().then(function(info){
    if (info == true)
    {
      if (bounty.getDis())
      {
        reloadBounty();
        bounty.setDis(false);
      }
      addBounty(socket, 'addBounty', 'raddBounty');
    }
  })
  account.Reconnect().then(function(info){
    if (info == true)
    {
      if (account.getDis())
      {
        reloadAccount();
        account.setDis(false);
      }
      reg(socket, 'reg', 'rreg');
      existAccount(socket, 'existAccount', 'rexistAccount');
    }
  })
  
  
  
  

  socket.on('disconnect', function()
  {
    console.log('disconnect'+socket.id);
  })
})

webuser.on('connection', function(socket){
  console.log(socket.id);

  bounty.Reconnect().then(function(info){
    if (info == true)
    {
      if (bounty.getDis())
      {
        reloadBounty();
        bounty.setDis(false);
      }
      allEventNewAddBounty(socket, '', 'rallEventNewAddBounty');
      allEventNewSend(socket, '', 'rallEventNewSend');
    }
  })
  account.Reconnect().then(function(info){
    if (info == true)
    {
      if (account.getDis())
      {
        reloadAccount();
        account.setDis(false);
      }
      allEventNewAccount(socket, '', 'rallEventNewAccount');
    }
  })

  
  

  socket.on('disconnect', function()
  {
    console.log('disconnect'+socket.id);
  })
})
NewAccount(webuser);

user.on('connection', function(socket){
  console.log(socket.id);

  bounty.Reconnect().then(function(info){
    if (info == true)
    {
      if (bounty.getDis())
      {
        reloadBounty();
        bounty.setDis(false);
      }

      sendBounty(socket, 'sendBounty', 'rsendBounty');
      allEventNewAddBounty(socket, 'history', 'rhallEventNewAddBounty');
      allEventNewSend(socket, 'history', 'rhallEventNewSend');
      getAllBountySymbol(socket, 'getAllBountySymbol', 'rgetAllBountySymbol');
    }
  })
  account.Reconnect().then(function(info){
    if (info == true)
    {
      if (account.getDis())
      {
        reloadAccount();
        account.setDis(false);
      }
      login(socket, 'login', 'rlogin');
      getInfoUser(socket, 'getInfoUser', 'rgetInfoUser');
    }
  })

  dataId[socket.id] = socket.id;
  dataUser[socket.id] = socket.id;
  dataLg[socket.id] = false;

  socket.on('disconnect', function()
  {
    console.log('disconnect'+socket.id);
    delete dataId[dataUser[socket.id]];
    delete dataUser[socket.id];
    delete dataLg[socket.id];
  })
})

NewAdd(webuser, user);
NewSend(webuser, user);

function reloadBounty () {
  console.log('reloadBounty');
  NewAdd(webuser, user);
  NewSend(webuser, user);
}
function reloadAccount () {
  console.log('reloadAccount');
  NewAccount(webuser);
}

function login(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    try
    {
      var lg = await account.login(data.user, data.pass);
      
      if (lg == true)
      {
        socket.emit(keyout, success({}, 'success'));
        dataUser[socket.id] = data.user;
        dataId[data.user] = socket.id;
        delete dataId[socket.id];
        dataLg[socket.id] = true;
      }
      else
      {
        socket.emit(keyout, error('may be user doesnt exist.'));
      }
    }
    catch(e)
    {
      socket.emit(keyout, error('may be user doesnt exist.'));
    }
  })
}

function getInfoUser(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    if (dataLg[socket.id])
    {
      try
      {
        var data = await bounty.getInfoUser(data.user);
        socket.emit(keyout, success(data, 'success'));
      }
      catch(e)
      {
        socket.emit(keyout, error('may be user doesnt exist.'));
      }
    }
    else
    {
      socket.emit(keyout, error('must login'));
    }
  })
}

function getAllBountySymbol(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    if (dataLg[socket.id])
    {
      try
      {
        var data = await bounty.getAllBountySymbol();
        socket.emit(keyout, success(data, 'success'));
      }
      catch(e)
      {
        socket.emit(keyout, error('error'));
      }
    }
    else
    {
      socket.emit(keyout, error('must login'));
    }
  })
}

function sendBounty(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    if (dataLg[socket.id])
    {
      try
      {
        data = await bounty.sendBounty(data.userA, data.passA, data.symbolA, data.val, data.userB, data.symbolB);
        var tx = config.infoTransaction(data);
        if (tx.status == true)
        {
          socket.emit(keyout, success(tx, 'success'));
        }
        else
        {
          socket.emit(keyout, error('wrong with input'));
        }
      }
      catch(e)
      {
        socket.emit(keyout, error('wrong with input'));
      }
    }
    else
    {
      socket.emit(keyout, error('must login'));
    }
  })
}

//---------------------------------------------

function NewAccount(io)
{
  account.contract.events.NewAccount({
    fromBlock: 0
  })
  .on('data', event => {
    io.emit('NewAccount', success(config.getInfoEvent(event), 'success'));
  })
  .on('changed', event => {
    console.log('event removed from blockchain:', event)
  })
  .on('error', error => {
    console.error(error)
  })
}

function NewAdd(io, ioUser)
{
  bounty.contract.events.NewAdd({
    fromBlock: 0
  })
  .on('data', event => {
    var info = config.getInfoEvent(event);
    if (dataId[info.returnValues.user]!=undefined && dataLg[dataId[info.returnValues.user]] == true)
    {
      ioUser.to(dataId[info.returnValues.user]).emit('NewAdd', success(info, 'success'));
    }
    io.emit('NewAdd', success(info, 'success'));
  })
  .on('changed', event => {
    console.log('event removed from blockchain:', event)
  })
  .on('error', error => {
    console.error(error)
  })
}

function NewSend(io, ioUser)
{
  bounty.contract.events.NewSend({
    fromBlock: 0
  })
  .on('data', event => {
    var info = config.getInfoEvent(event);
    if (dataId[info.returnValues.userB]!=undefined && dataLg[dataId[info.returnValues.userB]] == true)
    {
      ioUser.to(dataId[info.returnValues.userB]).emit('NewSend', success(info, 'success'));
    }
    io.emit('NewSend', success(info, 'success'));
  })
  .on('changed', event => {
    console.log('event removed from blockchain:', event)
  })
  .on('error', error => {
    console.error(error)
  })
}

async function allEventNewAccount(socket, keyin, keyout)
{
  try
  {
    data = await account.allEventNewAccount();
    socket.emit(keyout, success(data, 'success'));
  }
  catch(e)
  {
    socket.emit(keyout, error(e));
  }
}

async function allEventNewAddBounty(socket, keyin, keyout)
{
  try
  {
    data = await bounty.allEventNewAddBounty();
    socket.emit(keyout, success(data, 'success'));
  }
  catch(e)
  {
    socket.emit(keyout, error(e));
  }
}

async function allEventNewSend(socket, keyin, keyout)
{
  try
  {
    data = await bounty.allEventNewSend();
    socket.emit(keyout, success(data, 'success'));
  }
  catch(e)
  {
    socket.emit(keyout, error(e));
  }
}

function reg(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    try
    {
      data = await account.regAccount(data.user, data.pass);
      var tx = config.infoTransaction(data);
      if (tx.status == true)
      {
        socket.emit(keyout, success(tx, 'success'));
      }
      else
      {
        socket.emit(keyout, error('may be user exist.'));
      }
    }
    catch(e)
    {
      socket.emit(keyout, error('may be user exist.'));
    }
  })
}

function existAccount(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    data = await account.existAccount(data.user, data.pass);
    socket.emit(keyout, success({exist: data}, 'success'));
  })
}

function addBounty(socket, keyin, keyout)
{
  socket.on(keyin,async function(data){
    try
    {
      data = await bounty.addBounty(data.user, data.symbol, data.value);
      var tx = config.infoTransaction(data);
      if (tx.status == true)
      {
        socket.emit(keyout, success(tx, 'success'));
      }
      else
      {
        socket.emit(keyout, error('may be symbol or user doesnt exist.'));
      }
    }
    catch(e)
    {
      socket.emit(keyout, error('may be symbol or user doesnt exist.'));
    }
  })
}

function success(data, msg)
{
  return {cd: 0, msg: msg, data: data};
}

function error(msg)
{
  return {cd: 1, msg: msg, data: {}};
}